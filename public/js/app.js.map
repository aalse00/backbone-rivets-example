{"version":3,"file":"public/js/app.js","sources":["app/example.coffee"],"names":[],"mappingsnKA;;A","sourcesContent":["\"The Rivets adaptor for Backbone models. \\nSee docs on adaptors here: http://www.rivetsjs.com/docs/#adapters\";\nvar ContactFormView, ContactModel, ContactView, _ref, _ref1, _ref2,\n  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nrivets.adapters[':'] = {\n  subscribe: function(obj, keypath, callback) {\n    return obj.on(\"change:\" + keypath, callback);\n  },\n  unsubscribe: function(obj, keypath, callback) {\n    return obj.off(\"change:\" + keypath, callback);\n  },\n  read: function(obj, keypath) {\n    return obj.get(keypath);\n  },\n  publish: function(obj, keypath, value) {\n    return obj.set(keypath, value);\n  }\n};\n\n\"Custom Rivets formatter to replace text line breaks with <br>s\\nSee formatter docs here: http://www.rivetsjs.com/docs/#formatters\";\n\nrivets.formatters.linebreaksbr = function(value) {\n  return value.replace(/\\n/g, '<br>');\n};\n\n\"The Backbone Model and Views for our example.\\nNormally these would be split into their own files but\\nfor examples sake we're combinding everything here.\";\n\nContactModel = (function(_super) {\n  __extends(ContactModel, _super);\n\n  function ContactModel() {\n    this.hasLinks = __bind(this.hasLinks, this);\n    _ref = ContactModel.__super__.constructor.apply(this, arguments);\n    return _ref;\n  }\n\n  ContactModel.prototype.url = \"contacts/\";\n\n  ContactModel.prototype.defaults = function() {\n    return {\n      first_name: \"\",\n      last_name: \"\",\n      short_bio: \"\",\n      links: {\n        github: \"\",\n        twitter: \"\",\n        website: \"\"\n      }\n    };\n  };\n\n  ContactModel.prototype.getGravatar = function() {\n    var baseURL, imgPath;\n    if (!this.get(\"email\")) {\n      return \"\";\n    }\n    baseURL = \"http://www.gravatar.com/avatar/\";\n    imgPath = hex_md5(this.get('email'));\n    return \"\" + baseURL + \"/\" + imgPath;\n  };\n\n  ContactModel.prototype.getFullName = function() {\n    return \"\" + (this.get('first_name')) + \" \" + (this.get('last_name'));\n  };\n\n  ContactModel.prototype.hasLinks = function() {\n    var vs;\n    vs = _.uniq(_.values(this.get(\"links\")));\n    return !(vs.length === 1 && vs[0] === \"\");\n  };\n\n  return ContactModel;\n\n})(Backbone.Model);\n\nContactFormView = (function(_super) {\n  __extends(ContactFormView, _super);\n\n  function ContactFormView() {\n    this.loadSample = __bind(this.loadSample, this);\n    _ref1 = ContactFormView.__super__.constructor.apply(this, arguments);\n    return _ref1;\n  }\n\n  ContactFormView.prototype.el = \"#contact-form-view\";\n\n  ContactFormView.prototype.events = {\n    \"keyup textarea\": function(e) {\n      return $(e.currentTarget).trigger(\"change\");\n    }\n  };\n\n  ContactFormView.prototype.render = function() {\n    return this.bindingView = rivets.bind(this.el, {\n      contact: this.model,\n      view: this\n    });\n  };\n\n  ContactFormView.prototype.remove = function() {\n    this.bindingView.unbind();\n    return ContactFormView.__super__.remove.call(this);\n  };\n\n  ContactFormView.prototype.loadSample = function() {\n    this.model.set({\n      first_name: \"Mark\",\n      last_name: \"Johnson\",\n      short_bio: \"Web designer, developer and teacher. Co-founder of Pathwright\",\n      email: \"wmdmark@gmail.com\",\n      links: {\n        twitter: \"http://twitter.com/wmdmark\",\n        github: \"http://github.com/wmdmark\",\n        website: \"http://pathwright.com\"\n      }\n    });\n    return false;\n  };\n\n  return ContactFormView;\n\n})(Backbone.View);\n\nContactView = (function(_super) {\n  __extends(ContactView, _super);\n\n  function ContactView() {\n    _ref2 = ContactView.__super__.constructor.apply(this, arguments);\n    return _ref2;\n  }\n\n  ContactView.prototype.el = \"#contact-view\";\n\n  ContactView.prototype.render = function() {\n    this.bindingView = rivets.bind(this.el, {\n      contact: this.model\n    });\n    return this;\n  };\n\n  ContactView.prototype.remove = function() {\n    this.bindingView.unbind();\n    return ContactView.__super__.remove.call(this);\n  };\n\n  return ContactView;\n\n})(Backbone.View);\n\n$(function() {\n  window.contactModel = new ContactModel();\n  contactModel.on(\"change\", function() {\n    return console.log(this.attributes);\n  });\n  new ContactFormView({\n    model: contactModel\n  }).render();\n  return new ContactView({\n    model: contactModel\n  }).render();\n});\n"]}