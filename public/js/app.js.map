{"version":3,"file":"public/js/app.js","sources":["app/example.coffee","app/sample-data.coffee"],"names":[],"mappingsrMA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7BA;;A","sourcesContent":["\"The Rivets adaptor for Backbone models. \\nSee docs on adaptors here: http://www.rivetsjs.com/docs/#adapters\\nThis is a very simple Backbone adaptor. \\nFor more advanced binding check out: \\nhttps://github.com/azproduction/rivets-backbone-adapter\";\nvar BoundView, ContactFormView, ContactModel, ContactView, DebugView, sampleData, _ref, _ref1, _ref2, _ref3, _ref4,\n  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nrivets.adapters[':'] = {\n  subscribe: function(obj, keypath, callback) {\n    return obj.on(\"change:\" + keypath, callback);\n  },\n  unsubscribe: function(obj, keypath, callback) {\n    return obj.off(\"change:\" + keypath, callback);\n  },\n  read: function(obj, keypath) {\n    return obj.get(keypath);\n  },\n  publish: function(obj, keypath, value) {\n    return obj.set(keypath, value);\n  }\n};\n\n\"The Backbone Model and Views for our example.\\nNormally these would be split into their own files but\\nfor examples sake we're combinding everything here.\";\n\nContactModel = (function(_super) {\n  __extends(ContactModel, _super);\n\n  function ContactModel() {\n    this.hasLinks = __bind(this.hasLinks, this);\n    _ref = ContactModel.__super__.constructor.apply(this, arguments);\n    return _ref;\n  }\n\n  ContactModel.prototype.url = \"contacts/\";\n\n  ContactModel.prototype.defaults = function() {\n    return {\n      first_name: \"\",\n      last_name: \"\",\n      short_bio: \"\",\n      github: \"\",\n      twitter: \"\",\n      website: \"\"\n    };\n  };\n\n  ContactModel.prototype.getGravatar = function() {\n    if (!this.get(\"email\")) {\n      return \"\";\n    }\n    return \"http://www.gravatar.com/avatar/\" + (hex_md5(this.get('email')));\n  };\n\n  ContactModel.prototype.getFullName = function() {\n    return \"\" + (this.get('first_name')) + \" \" + (this.get('last_name'));\n  };\n\n  ContactModel.prototype.hasLinks = function() {\n    var vs;\n    vs = _.uniq(_.values(this.get(\"links\")));\n    return !(vs.length === 1 && vs[0] === \"\");\n  };\n\n  return ContactModel;\n\n})(Backbone.Model);\n\nsampleData = require('sample-data');\n\nBoundView = (function(_super) {\n  __extends(BoundView, _super);\n\n  function BoundView() {\n    _ref1 = BoundView.__super__.constructor.apply(this, arguments);\n    return _ref1;\n  }\n\n  BoundView.prototype.render = function() {\n    BoundView.__super__.render.call(this);\n    this.bindingView = rivets.bind(this.el, {\n      model: this.model,\n      view: this\n    });\n    return this;\n  };\n\n  BoundView.prototype.remove = function() {\n    this.bindingView.unbind();\n    return BoundView.__super__.remove.call(this);\n  };\n\n  return BoundView;\n\n})(Backbone.View);\n\nContactFormView = (function(_super) {\n  __extends(ContactFormView, _super);\n\n  function ContactFormView() {\n    _ref2 = ContactFormView.__super__.constructor.apply(this, arguments);\n    return _ref2;\n  }\n\n  ContactFormView.prototype.el = \"#contact-form-view\";\n\n  return ContactFormView;\n\n})(BoundView);\n\nContactView = (function(_super) {\n  __extends(ContactView, _super);\n\n  function ContactView() {\n    _ref3 = ContactView.__super__.constructor.apply(this, arguments);\n    return _ref3;\n  }\n\n  ContactView.prototype.el = \"#contact-view\";\n\n  return ContactView;\n\n})(BoundView);\n\nDebugView = (function(_super) {\n  __extends(DebugView, _super);\n\n  function DebugView() {\n    _ref4 = DebugView.__super__.constructor.apply(this, arguments);\n    return _ref4;\n  }\n\n  DebugView.prototype.el = \"#debug-view\";\n\n  DebugView.prototype.sampleData = require(\"sample-data\");\n\n  DebugView.prototype.events = {\n    \"click a.btn\": function(e) {\n      var sample;\n      sampleData = sample = $(e.currentTarget).data().sample;\n      this.watched.clear({\n        silent: true\n      });\n      return this.watched.set(this.sampleData[sample]);\n    }\n  };\n\n  DebugView.prototype.initialize = function(options) {\n    if (this.model == null) {\n      this.model = new Backbone.Model();\n    }\n    this.watched = options.watch;\n    this._setWatchedModelJSON();\n    return this.listenTo(this.watched, \"change\", this._setWatchedModelJSON);\n  };\n\n  DebugView.prototype._setWatchedModelJSON = function() {\n    var json;\n    json = JSON.stringify(this.watched.toJSON(), null, '  ');\n    return this.model.set(\"modelJSON\", json);\n  };\n\n  return DebugView;\n\n})(BoundView);\n\n\"Custom Rivets formatter to replace text line breaks with <br>s\\nSee formatter docs here: http://www.rivetsjs.com/docs/#formatters\";\n\nrivets.formatters.linebreaksbr = function(value) {\n  return value.replace(/\\n/g, '<br>');\n};\n\n\"Custom Rivets binder to update value bindings \\\"live\\\" (onkeyup)\\nBindings documentation here: http://www.rivetsjs.com/docs/#binders\";\n\nrivets.binders['live-value'] = {\n  publishes: true,\n  bind: function(el) {\n    return $(el).on('keyup', this.publish);\n  },\n  unbind: function(el) {\n    return $(el).off('keyup', this.publish);\n  },\n  routine: function(el, value) {\n    return rivets.binders.value.routine(el, value);\n  }\n};\n\n$(function() {\n  window.contactModel = new ContactModel();\n  new ContactFormView({\n    model: contactModel\n  }).render();\n  new ContactView({\n    model: contactModel\n  }).render();\n  return new DebugView({\n    watch: contactModel\n  }).render();\n});\n","module.exports = {\n  michael: {\n    first_name: \"Michael\",\n    last_name: \"Richards\",\n    short_bio: \"Ruby/JavaScript developer. Author of Rivets.js.\",\n    email: \"mike22e@gmail.com\",\n    twitter: \"https://github.com/mikeric\",\n    github: \"http://github.com/wmdmark\",\n    website: \"\"\n  },\n  mark: {\n    first_name: \"Mark\",\n    last_name: \"Johnson\",\n    short_bio: \"Web designer, developer and teacher. Co-founder of Pathwright\",\n    email: \"wmdmark@gmail.com\",\n    twitter: \"http://twitter.com/wmdmark\",\n    github: \"http://github.com/wmdmark\",\n    website: \"http://pathwright.com\"\n  },\n  mason: {\n    first_name: \"Mason\",\n    last_name: \"Stewart\",\n    short_bio: \"Frontender, JavaScripter, & Lisper\",\n    email: \"mason@theironyard.com\",\n    twitter: \"http://twitter.com/masondesu\",\n    github: \"https://github.com/masondesu\",\n    website: \"\"\n  }\n};\n"]}